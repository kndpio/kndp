argo-cd:
  enabled: true
  dex:
    enabled: false
  applicationSet:
    enabled: false
  notifications:
    enabled: false
  configs:
    cm:
      exec.enabled: true
      accounts.admin: apiKey, login

  server:
    replicas: 1
    restartPolicy: Never
    extraArgs:
    - --insecure
    - --rootpath
    - /argo-cd
    ingress:
      enabled: true
      hosts:
      - kndp.local
      paths:
      - /argo-cd
      annotations:
        kubernetes.io/ingress.class: nginx

ingress-nginx:
  enabled: true
  controller:
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    hostPort:
      enabled: true
    terminationGracePeriodSeconds: 0
    service:
      type: NodePort
    watchIngressWithoutClass: true
    nodeSelector:
      ingress-ready: "true"
    tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Equal"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Equal"
      effect: "NoSchedule"
    publishService:
      enabled: false
    extraArgs:
      publish-status-address: localhost
      enable-ssl-passthrough: true

grafana:
  enabled: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  env:
    GF_SERVER_SERVE_FROM_SUB_PATH: true
  dashboardsConfigMaps:
    default: '{{ .Release.Name }}-dashboards-grafana'
  adminUser: admin
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Loki
        type: loki
        access: proxy
        basicAuth: true
        basicAuthUser: admin
        url: http://kndp-loki.default.svc:3100
        jsonData:
          maxLines: 1000
  ingress:
    enabled: true
    path: /grafana
    pathType: ImplementationSpecific
    hosts:
    - kndp.local
  grafana.ini:
    server:
      root_url: http://kndp.local/grafana/login

loki:
  enabled: true
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
  singleBinary:
    replicas: 1


backstage-backend:
  enabled: true
  initContainers:
  - name: argocd-cli
    image: quay.io/argoproj/argocd:v2.7.7
    command: ["/bin/sh", "-c", "argocd --core account generate-token --account admin > /tmp/argocd-token"]
    volumeMounts:
    - name: token-volume
      mountPath: /tmp
  - name: kubectl
    image: bitnami/kubectl
    command: ["/bin/sh", "-c", "kubectl create secret generic argocd-token --from-file=/tmp/argocd-token || true"]

    volumeMounts:
    - name: token-volume
      mountPath: /tmp
  volumes:
  - name: hostpath-volume
    hostPath:
      path: /storage
  - name: token-volume
    emptyDir: {}
  - name: app-config-volume
    configMap:
      name: backstage-backend-app-config-cm
  volumeMounts:
  - name: app-config-volume
    mountPath: /app/app-config.yaml
    subPath: app-config.yaml
  - name: hostpath-volume
    mountPath: /app/packages/backstage/backend
    subPath: packages/backstage/backend
  env:
  - name: ARGOCD_AUTH_TOKEN
    valueFrom:
      secretKeyRef:
        name: argocd-token
        key: argocd-token
  - name: API_ENDPOINTS
    value: '{{- join ";" .Values.apiEndpoints -}}'
  - name: NODE_EXTRA_CA_CERTS
    value: /run/secrets/kubernetes.io/serviceaccount/ca.crt

  appConfig:
    proxy:
      '/argocd/api':
        target: http://kndp.local/argo-cd/api/v1/
        changeOrigin: true
        secure: false
        headers:
          Cookie:
            $env: ARGOCD_AUTH_TOKEN
